---
import { Icon } from "astro-icon";

interface Props {
    class?: string;
}

const { class: className } = Astro.props;
---

<dark-mode-toggle>
    <button class={className}>
        <Icon name="bi:lightbulb-fill" class="lightModeToggleLabel" />
        <Icon name="bi:lightbulb" class="darkModeToggleLabel" />
    </button>
</dark-mode-toggle>

<style lang="scss">
    button {
        background: unset;
        border: unset;
        color: unset;
        font-family: unset;
        font-size: unset;
    }

    .lightModeToggleLabel,
    .darkModeToggleLabel {
        display: none;

        width: 1em;
        height: 1em;
    }

    @media (hover) {
        :global(html:not(.dark-theme)) {
            :hover > .darkModeToggleLabel,
            :not(:hover) > .lightModeToggleLabel {
                display: inline-block;
            }
        }

        :global(html.dark-theme) {
            :hover > .darkModeToggleLabel,
            :not(:hover) > .lightModeToggleLabel {
                display: inline-block;
            }
        }
    }

    @media (hover: none) {
        :global(html:not(.dark-theme)) .lightModeToggleLabel {
            display: inline-block;
        }

        :global(html.dark-theme) .darkModeToggleLabel {
            display: inline-block;
        }
    }
</style>

<script>
    let htmlClasses = document.documentElement.classList;

    class DarkModeToggle extends HTMLElement {
        constructor() {
            super();

            const button = this.querySelector("button")!;
            button.addEventListener("click", () => {
                if (htmlClasses.contains("dark-theme")) {
                    htmlClasses.remove("dark-theme");
                    localStorage.setItem("theme", "light");
                } else {
                    htmlClasses.add("dark-theme");
                    localStorage.setItem("theme", "dark");
                }
            });
        }
    }

    customElements.define("dark-mode-toggle", DarkModeToggle);
</script>
