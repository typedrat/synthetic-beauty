---
import { getClientId } from "auth/spotifyOAuth";

const clientId = getClientId();

///

import { getEncryptionKey } from "auth/getEncryptionKey";
import { isRedirectSafe } from "auth/isRedirectSafe";

let redirectTo = Astro.url.searchParams.get("redirect");

if (redirectTo === null) {
    redirectTo = "/";
} else if (!isRedirectSafe(redirectTo)) {
    console.warn("Unsafe redirection sanitized:", redirectTo);
    redirectTo = "/";
}

///

import * as jose from "jose";
import { v4 as uuidV4 } from "uuid";

const site = Astro.site!.toString();
const nonce = uuidV4();
const key = getEncryptionKey();

const state = await new jose.EncryptJWT({
    nonce,
    redirectTo,
})
    .setProtectedHeader({ alg: "dir", enc: "A256CBC-HS512" })
    .setIssuedAt()
    .setIssuer(site)
    .setAudience(site)
    .setExpirationTime("1h")
    .encrypt(key);

Astro.cookies.set("csrf-nonce", nonce, {
    httpOnly: true,
    secure: true,
    sameSite: "lax",
    maxAge: 60 * 60, // 1 hour
});
---

<html data-client-id={clientId} data-state={state}>
    <head>
        <meta charset="UTF-8" />
        <meta name="generator" content={Astro.generator} />
        <link rel="icon" href="data:," />
        <title>Login Redirect</title>
    </head>
</html>

<script>
    import { generateAuthorizationURL } from "auth/spotifyOAuth";

    const clientId = document.documentElement.dataset["clientId"];
    const state = document.documentElement.dataset["state"];

    if (clientId) {
        const authURL = generateAuthorizationURL(clientId, state);

        console.debug("Generated authorization URL:", authURL);
        window.location.href = authURL.toString();
    } else {
        console.error("Couldn't find Spotify client ID!");
    }
</script>
